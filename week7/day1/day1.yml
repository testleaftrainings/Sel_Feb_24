Today's Agenda:
02:30 - 03:15 -> Constructors & Keywords(this)
03:15 - 04:30 -> POM Introduction 
04:30 - 05:00 -> Breakout 
05:00 - 05:10 -> Break
05:10 - 05:40 -> POM Parallel Execution
05:40 - 06:10 -> Breakout +Break
06:10 - 06:40 -> POM Excel Integration


Constructor:




















Page Object Model - Design Pattern

Design Pattern -> Best Practices to code
 - pom.xml -> Project Object Model

 - POM     -> Page Object Model







Pages
LoginPage enterUsername - return this enterPassword clickLoginButton - return new WelcomePage()
WelcomePage clickCRMSFALink
MyHomePage clickLeadsLink
MyLeadsPage clickCreateLeadLink clickFindLeadsLink clickMergeLeadsLink
CreateLeadPage enterCompanyName enterFirstName enterLastName clickSubmitButton - ViewLeadPage verifyLeads clickEditButton clickDeleteButton clickDuplicateButton
Steps to Implement POM:
*Create a new Project and have all the dependencies inside the pom.xml
*Create 3 packages inside src/main/java
*base Create a ProjectSpecificMethods and create 2 methods preCondition() and postCondition() and annotate with @BeforeMethod and @AfterMethod Create static driver as a global variable
*pages Create 6 classes for each page Each Classes inside pages package should extends ProjectSpecificMethods Create methods for each action inside each page Inside each method add return statement according to the page navigation if an action stays in the sama page -> return this if an action takes you to another page -> return new Page();
testcases
*All classes inside the testcase package should extend ProjectSpecificMethods Create a class called RunLogin Create a method called runLogin and annotate with @Test Create object for LoginPage and call the method and execute


-If i want to reatin same page - this;
-If i want to go next page - return new  nextpage constructor- return new Homepage();


For Sequential Execution:
- Driver declaration should be static
- Create 2 testcases inside testcases package
     runLogin
     runCreateLead
- Select the required testcases and convert into testng.xml file
- Finally, run the testcases together sequentially from testng.xml file



For Parallel Execution:

    - Remove static keyword in BaseClass
    - Create parameterized constructor in each pages
       public LoginPage(ChromeDriver driver) {
        //this keyword-used in variable level
	        this.driver=driver;
         }
    - Pass driver value in each Constructor initialization in each pages and testcases
return new HomePage(driver);






POM with Excel Integration:
 create new Package as utils 
 copy and paste from program perv porject
 create folder and paste excel sheet

Create data folder and have the excelsheets inside Login CreateLead
Create a package called utils and have the ReadExcel java class inside
Create sendData() and annotate with DataProvider and call the readExcel() and return
Replace all the hardcoded data with input arguments in the required pages
In the testClasses, use dataProvider attribute to receive the data and pass input arguments in the test method.
Create setValues() in each testclass to mention the fileName and annotate with @BeforeTest


How to Parameterize the data?
	  1)Create a new package(utils) and copy the ReadExel class from the previous project or package 
	  and paste it here
	  2)Create a data folder and create excel sheets
	  3)Declare the filedata globally in baseclass
	  4)Create a method for @DataProvider and call the ReadExel class
	  5)Integrate @Test with dataProvider attribute
	  6)Pass the inputs as arguments in the testcase method level and replace the hardcoded values
	  7)In the testcase create a method to mention the ExcelFileName and annotate with @BeforeTest