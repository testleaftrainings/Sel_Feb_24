week6.day1

Todays Agenda: 
02:30 - 03:00 -> Common data Integration 
03:00 - 03:15 -> Breakout 
03:15 - 04:15 -> TestNG Attributes
04:15 - 04:30 -> Break
04:30 - 05:00 -> Cucumber Introduction
05:00 - 05:30 -> Feature File
05:30 - 05:50 -> Breakout
05:50 - 06:20 -> Step Defination & Runner Class
06:20 - 06:45 -> Breakout



Common data integration:

 1.remove DataProvider from Create lead..paste inside  BaseClass
 2.Create string variable in excelpgm pass into file data 
 3.need pass variable inside baseclass, pass variable as gobally
 4.give the variable in dataprovider inside method() 
 5. Create @BeforeTest inside testcase create,edit,delete and pass the value correctly



 ● Steps to Create File :-
 Creating features package, 
 Mouseover on it & Right Click --> New --> Other... --> Select File under General Folder --> File Click Next
● Set File name as Login.feature & Click Finish
● U can see a new file Created under features package like slice of Cucumber IMG 
Then it's Fine👍🏻🙂





Gherkin keyword:
Feature:  Login functionality  of Leaftaps Application
          (Describes the functionality of an appliction)

       

Scenario:  Login with Valid credentials
           (Represents a testcase)
  Given    Launch the browser     -> to represent the precondition of a scenario
  And      Load the url
  And      Enter the username as Demosalesmanager
  And      Enter the password as crmsfa
  When     Click on the Login button -> to represent the test condition  
  Then     Homepage should be displayed -> To represent the positive expected result  

Scenario:  Login with InValid credentials
           (Represents a testcase)
  Given    Launch the browser     -> to represent the precondition of a scenario
  And      Load the url
  And      Enter the username   as Demo
  And      Enter the password   as crms
  When     Click on the Login button -> to represent the test condition  
  But      ErrorMessage should be displayed -> To represent the negative expected result    
Dependencies:
<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
	<dependency>
		<groupId>io.cucumber</groupId>
		<artifactId>cucumber-java</artifactId>
		<version>7.10.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
	<dependency>
		<groupId>io.cucumber</groupId>
		<artifactId>cucumber-testng</artifactId>
		<version>7.10.0</version>
	</dependency>
Steps to Create the layers of Cucumber
Create 3 packages under src/test/java features steps runner

Create feature file inside features package

Right click on features package -> Click Other -> Double Click General -> Double click File -> Give Filename with .feature as extension -> Click Finish
Create StepDefinition class inside steps package

Inside StepDefinition create methods for each step defined in the feature file
And put the real codes inside each methods
To integrate StepDefinition and the feature file on the top of each method use @Given/And/When/Then("")
Create CucumberRunner class inside runner package

The runner class should extend AbstractTestNGCucumberTests
Add @CucumberOptions on the top of the Runner Class
Within @CucumberOptions() use some of the attributes features -> to mention the path of the feature file glue -> to mention the package name of StepDefintion monochrome -> to remove the unreadable/junk characters from the console publish -> to get the cucumber report in the console @CucumberOptions(features = "src/test/java/features/Login.feature", glue = "steps" , monochrome = true, publish = true) public class CucumberRunner extends AbstractTestNGCucumberTests{
} 
Steps to Parameterize:
Surround the value with single quote in multiple scenarios in the feature file Enter the username as 'Demosalesmanager'
In StepDEfinition replace the value on the top of the method with {string} @And("Enter the username as {string}")
Pass input argument to that method and replace the hardcoded data @And("Enter the username as {string}") public void enterUsername(String uName) { driver.findElement(By.id("username")).sendKeys(uName); }
Exceptions:
DuplicateStepDefinitionException
UndefinedStepException
Steps to pass multiple data to a scenario using Scenario Outline and Examples:
Create a feature file called CreateLead.feature and write all the BDD steps
In Scenario Outline replace the data with <> and pass a name inside it Enter the companyname as
In StepDefinition on the top of that particular method replace the parameterized data with (.)$ @Given("Enter the companyname as (.)$")
